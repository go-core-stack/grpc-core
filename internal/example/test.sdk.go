// Code generated by protoc-gen-sdk. DO NOT EDIT.
// source: test.proto

package example

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"

	auth "github.com/go-core-stack/auth/client"
)

// HelloWorldService
// provides SDK wrapper methods for HelloWorld service
type HelloWorldService interface {
	// sample post request
	// comment line 1
	// comment line 2
	PostObject(ctx context.Context, req *PostRequest) (*PostResponse, error)
}

type implHelloWorldService struct {
	client auth.Client
}

// NewHelloWorldService
// creates a new SDK wrapper for HelloWorld service
// function expects to be provided with an auth client to
// trigger request to service
func NewHelloWorldService(client auth.Client) HelloWorldService {
	return &implHelloWorldService{
		client: client,
	}
}

func (s *implHelloWorldService) PostObject(ctx context.Context, req *PostRequest) (*PostResponse, error) {
	uri := "/v1/object/{name}"
	// ensure replacing the variables in the uri before triggering client
	uri = strings.Replace(uri, "{"+"name"+"}", url.PathEscape(fmt.Sprintf("%v", req.Name)), -1)

	// use marshaller for grpc Gateway since we are working protobuf files
	marshaller := &runtime.JSONPb{}

	inData, _ := marshaller.Marshal(req)
	r, _ := http.NewRequestWithContext(ctx, "POST", uri, bytes.NewBuffer(inData))

	r.Header.Set("Content-Type", "application/json")
	resp, err := s.client.Do(r)
	if err != nil {
		return nil, err
	}

	defer func() {
		if resp.Body != nil {
			_ = resp.Body.Close()
		}
	}()
	outBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	out := &PostResponse{}
	err = marshaller.Unmarshal(outBytes, out)
	if err != nil {
		return nil, err
	}

	return out, nil
}
