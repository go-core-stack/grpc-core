package genroute

import (
	"bytes"
	"text/template"

	"google.golang.org/grpc/grpclog"

	"github.com/go-core-stack/grpc-core/internal/casing"
	"github.com/go-core-stack/grpc-core/internal/descriptor"
)

type param struct {
	*descriptor.File
	UseRequestContext  bool
	RegisterFuncSuffix string
	AllowPatchFeature  bool
	OmitPackageDoc     bool
	PathPrefix         string
}

type trailerParams struct {
	P                  param
	Services           []*descriptor.Service
	UseRequestContext  bool
	RegisterFuncSuffix string
	PathPrefix         string
}

func applyTemplate(p param, reg *descriptor.Registry) (string, error) {
	var targetServices []*descriptor.Service

	for _, msg := range p.Messages {
		msgName := casing.Camel(*msg.Name)
		msg.Name = &msgName
	}

	for _, svc := range p.Services {
		var methodWithBindingsSeen bool
		svcName := casing.Camel(*svc.Name)
		svc.Name = &svcName

		for _, meth := range svc.Methods {
			if grpclog.V(2) {
				grpclog.Infof("Processing %s.%s", svc.GetName(), meth.GetName())
			}
			methName := casing.Camel(*meth.Name)
			meth.Name = &methName
			for _, b := range meth.Bindings {
				if err := reg.CheckDuplicateAnnotation(b.HTTPMethod, b.PathTmpl.Template, svc); err != nil {
					return "", err
				}

				methodWithBindingsSeen = true
			}
		}
		if methodWithBindingsSeen {
			targetServices = append(targetServices, svc)
		}
	}
	if len(targetServices) == 0 {
		return "", errNoTargetService
	}

	tp := trailerParams{
		P:                  p,
		Services:           targetServices,
		UseRequestContext:  p.UseRequestContext,
		RegisterFuncSuffix: p.RegisterFuncSuffix,
		PathPrefix:         p.PathPrefix,
	}

	w := bytes.NewBuffer(nil)
	if err := rtemplate.Execute(w, tp); err != nil {
		return "", err
	}

	return w.String(), nil
}

var (
	rtemplate = template.Must(template.New("header").Parse(`
// Code generated by protoc-gen-routes. DO NOT EDIT.
// source: {{.P.GetName}}

package {{.P.GoPkg.Name}}

import "github.com/go-core-stack/auth/model"

{{range $svc := .Services}}
var Routes{{$svc.GetName}} = []*model.Route{}
{{end}}

func init() {
{{range $svc := .Services}}
{{range $m := $svc.Methods}}
	{{ $b := (index $m.Bindings 0) }}Routes{{$svc.GetName}} = append(Routes{{$svc.GetName}}, model.NewRoute("{{ $b.PathTmpl.Template }}", {{$b.HTTPMethod | printf "%q"}}))
{{end}}
{{end}}
}`))
)
